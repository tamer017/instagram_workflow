name: Generate and Publish Quran Video

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  generate-video:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          ffmpeg -version

      - name: Install required fonts
        run: |
          sudo apt-get install -y fontconfig fonts-dejavu-core fonts-liberation fonts-noto
          # Create fonts directory and copy system fonts
          mkdir -p ~/.fonts
          # For Arabic support
          sudo apt-get install -y fonts-noto-core fonts-noto-ui-core fonts-noto-extra
          fc-cache -fv

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install instagrapi

      - name: Select next group to publish (sequential)
        id: select_group
        run: |
          # Get the next unpublished group in order
          GROUP_ID=$(python3 group_tracker.py 2>&1 | grep "Next group to publish:" | cut -d' ' -f5)
          
          if [ -z "$GROUP_ID" ]; then
            echo "No group found, trying to get next group..."
            GROUP_ID=$(python3 -c "from group_tracker import get_next_group; print(get_next_group() or '')")
          fi
          
          if [ -z "$GROUP_ID" ]; then
            echo "ERROR: No group available to publish!"
            exit 1
          fi
          
          echo "Selected group: $GROUP_ID"
          echo "GROUP_ID=$GROUP_ID" >> $GITHUB_OUTPUT

      - name: Generate video
        id: generate
        run: |
          # Run the video generation script
          python generate_simple_video.py --group ${{ steps.select_group.outputs.GROUP_ID }} --no-arabic-text --no-english-text
          
          # Find the generated video
          VIDEO_FILE=$(ls -t generated_videos/*.mp4 | head -n 1)
          echo "Generated video: $VIDEO_FILE"
          echo "VIDEO_FILE=$VIDEO_FILE" >> $GITHUB_OUTPUT
          
          # Get video info
          if [ -f "$VIDEO_FILE" ]; then
            VIDEO_SIZE=$(du -h "$VIDEO_FILE" | cut -f1)
            echo "Video size: $VIDEO_SIZE"
            echo "VIDEO_SIZE=$VIDEO_SIZE" >> $GITHUB_OUTPUT
            echo "SUCCESS=true" >> $GITHUB_OUTPUT
          else
            echo "SUCCESS=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload video as artifact
        if: steps.generate.outputs.SUCCESS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: quran-video-${{ steps.select_group.outputs.GROUP_ID }}
          path: ${{ steps.generate.outputs.VIDEO_FILE }}
          retention-days: 7

      - name: Publish to Instagram
        if: steps.generate.outputs.SUCCESS == 'true'
        env:
          INSTAGRAM_USERNAME: ${{ secrets.INSTAGRAM_USERNAME }}
          INSTAGRAM_PASSWORD: ${{ secrets.INSTAGRAM_PASSWORD }}
        run: |
          # Run publish script with instagrapi
          python publish_reel_instagrapi.py --video "${{ steps.generate.outputs.VIDEO_FILE }}" --caption "Quran Recitation - ${{ steps.select_group.outputs.GROUP_ID }}"

      - name: Mark group as published
        if: steps.generate.outputs.SUCCESS == 'true'
        run: |
          # Mark the group as successfully published
          python3 -c "from group_tracker import mark_group_published; mark_group_published('${{ steps.select_group.outputs.GROUP_ID }}', True)"
          
          # Show progress
          python3 -c "from group_tracker import get_progress; p = get_progress(); print(f'Progress: {p[\"published\"]}/{p[\"total\"]} ({p[\"percentage\"]:.1f}%)')"

      - name: Commit tracking file
        if: steps.generate.outputs.SUCCESS == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add published_groups.json
          git commit -m "Track published group: ${{ steps.select_group.outputs.GROUP_ID }}" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Create summary
        if: always()
        run: |
          echo "## Video Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Group ID**: ${{ steps.select_group.outputs.GROUP_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ steps.generate.outputs.SUCCESS == 'true' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Video Size**: ${{ steps.generate.outputs.VIDEO_SIZE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Video File**: ${{ steps.generate.outputs.VIDEO_FILE }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Workflow completed at $(date)" >> $GITHUB_STEP_SUMMARY

      - name: Clean up temporary files
        if: always()
        run: |
          # Clean up temp directories
          rm -rf temp_audio_downloads/*
          echo "Cleanup completed"
